version: "3.9"

# All services read variables from .env
x-common-env: &common-env
  TZ: "${TZ}"

networks:
  ai_net:
    driver: bridge

volumes:
  openwebui_data:
  ollama_data:
  traefik_data:
  firewall_data:

services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: unless-stopped
    env_file: .env
    environment:
      <<: *common-env
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
      - "${TRAEFIK_HTTPS_PORT}:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/etc/traefik
    labels:
      # Enable dashboard via Traefik itself
      - "traefik.enable=true"
      # Optional: secure the dashboard behind basic auth (swap for a hashed pass in production)
      # - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}:${TRAEFIK_DASHBOARD_PASS}"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      # To enable auth, also add:
      # - "traefik.http.routers.traefik.middlewares=traefik-auth"

    networks:
      - ai_net

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    env_file: .env
    environment:
      <<: *common-env
      OLLAMA_NUM_GPU: "${OLLAMA_NUM_GPU}"
    # If using NVIDIA GPUs with Docker:
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: ["gpu"]
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "${OLLAMA_HOST_PORT}:${OLLAMA_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:${OLLAMA_PORT}/api/tags"]
      interval: 15s
      timeout: 3s
      retries: 20
    networks:
      - ai_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ollama.rule=Host(`ollama.localhost`)"
      - "traefik.http.routers.ollama.entrypoints=web"
      - "traefik.http.services.ollama.loadbalancer.server.port=${OLLAMA_PORT}"

  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    restart: unless-stopped
    depends_on:
      ollama:
        condition: service_healthy
    env_file: .env
    environment:
      <<: *common-env
      # OpenWebUI respects these:
      WEBUI_AUTH: "${OPENWEBUI_AUTH}"
      WEBUI_ADMIN_EMAIL: "${OPENWEBUI_ADMIN}"
      WEBUI_ADMIN_PASSWORD: "${OPENWEBUI_PASSWORD}"
      OLLAMA_BASE_URL: "http://ollama:${OLLAMA_PORT}"
    ports:
      - "${OPENWEBUI_HOST_PORT}:${OPENWEBUI_PORT}"
    volumes:
      - openwebui_data:/app/backend/data
    networks:
      - ai_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openwebui.rule=Host(`ui.localhost`)"
      - "traefik.http.routers.openwebui.entrypoints=web"
      - "traefik.http.services.openwebui.loadbalancer.server.port=${OPENWEBUI_PORT}"

   firewall:
    build:
      context: ./firewall
      dockerfile: Dockerfile
    image: local/fastapi-firewall:latest   # also tags your local build
    container_name: ai-firewall
    restart: unless-stopped
    env_file: .env
    environment:
      TZ: "${TZ}"
      FIREWALL_MODE: "${FIREWALL_MODE}"
      FIREWALL_UPSTREAM: "${FIREWALL_UPSTREAM}"
      FIREWALL_BLOCKLIST_PATH: "${FIREWALL_BLOCKLIST_PATH}"
      FIREWALL_OUTPUT_RULES_PATH: "${FIREWALL_OUTPUT_RULES_PATH}"
    volumes:
      - firewall_data:/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:8000/healthz"]
      interval: 15s
      timeout: 3s
      retries: 20
    networks:
      - ai_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.firewall.rule=Host(`fw.localhost`)"
      - "traefik.http.routers.firewall.entrypoints=web"
      - "traefik.http.services.firewall.loadbalancer.server.port=8000"
